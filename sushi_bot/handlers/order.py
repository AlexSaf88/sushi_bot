# order handler
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from services.cart import get_cart_text, get_cart_items, clear_cart
from config import DELIVERY_COST, ADMIN_ID
from handlers import admin

router = Router()

class OrderFSM(StatesGroup):
    delivery_method = State()
    address = State()
    pickup_time = State()
    name = State()
    phone = State()
    utensils = State()
    confirm = State()

@router.callback_query(F.data == "checkout")
async def choose_delivery(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderFSM.delivery_method)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery"),
         InlineKeyboardButton(text="üèÉ –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="pickup")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "delivery")
async def ask_address(callback: CallbackQuery, state: FSMContext):
    await state.update_data(method="delivery")
    await state.set_state(OrderFSM.address)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await callback.answer()

@router.callback_query(F.data == "pickup")
async def ask_pickup(callback: CallbackQuery, state: FSMContext):
    await state.update_data(method="pickup")
    await state.set_state(OrderFSM.pickup_time)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:")
    await callback.answer()

@router.message(OrderFSM.address)
async def get_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.set_state(OrderFSM.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@router.message(OrderFSM.pickup_time)
async def get_pickup_time(message: Message, state: FSMContext):
    await state.update_data(pickup_time=message.text)
    await state.set_state(OrderFSM.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@router.message(OrderFSM.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(OrderFSM.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message(OrderFSM.phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(OrderFSM.utensils)
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–±–æ—Ä–æ–≤ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è?")

@router.message(OrderFSM.utensils)
async def get_utensils(message: Message, state: FSMContext):
    await state.update_data(utensils=message.text)
    await state.set_state(OrderFSM.confirm)

    data = await state.get_data()
    cart = get_cart_items(message.from_user.id)
    text = get_cart_text(message.from_user.id)
    delivery_text = ""
    total = sum(item['price'] * item['count'] for item in cart)
    if data.get("method") == "delivery":
        total += DELIVERY_COST
        delivery_text = f"\n–ê–¥—Ä–µ—Å: {data['address']}\n–î–æ—Å—Ç–∞–≤–∫–∞: {DELIVERY_COST} –ª–≤."
    else:
        delivery_text = f"\n–°–∞–º–æ–≤—ã–≤–æ–∑: {data['pickup_time']}"

    result = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:</b>\n"
        f"–ò–º—è: {data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–ü—Ä–∏–±–æ—Ä–æ–≤: {data['utensils']}\n"
        f"{delivery_text}\n\n"
        f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{text}\n\n<b>–ò—Ç–æ–≥–æ: {total} –ª–≤.</b>"
    )

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="final_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")]
    ])

    await message.answer(result, reply_markup=confirm_kb)

@router.callback_query(F.data == "final_confirm")
async def final_submit(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = get_cart_items(callback.from_user.id)
    text = get_cart_text(callback.from_user.id)
    delivery_text = ""
    total = sum(item['price'] * item['count'] for item in cart)
    if data.get("method") == "delivery":
        total += DELIVERY_COST
        delivery_text = f"\n–ê–¥—Ä–µ—Å: {data['address']}\n–î–æ—Å—Ç–∞–≤–∫–∞: {DELIVERY_COST} –ª–≤."
    else:
        delivery_text = f"\n–°–∞–º–æ–≤—ã–≤–æ–∑: {data['pickup_time']}"

    result = (
        f"<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n"
        f"–ò–º—è: {data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–ü—Ä–∏–±–æ—Ä–æ–≤: {data['utensils']}\n"
        f"{delivery_text}\n\n"
        f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{text}\n<b>–ò—Ç–æ–≥–æ: {total} –ª–≤.</b>"
    )

    admin_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
        ]
    ])

    msg = await callback.bot.send_message(ADMIN_ID, result, reply_markup=admin_kb)
    admin.admin_user_orders[msg.message_id] = callback.from_user.id

    await callback.message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
    clear_cart(callback.from_user.id)
    await state.clear()
    await callback.answer()