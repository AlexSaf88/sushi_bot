# admin handler
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime
from config import ADMIN_ID, WORK_HOURS, save_work_hours, load_menu, save_menu

router = Router()

class CancelOrderFSM(StatesGroup):
    waiting_for_reason = State()

class WorkHoursFSM(StatesGroup):
    waiting_for_open = State()
    waiting_for_close = State()
    waiting_for_days = State()

class AddDishFSM(StatesGroup):
    name = State()
    description = State()
    price = State()
    image = State()

admin_user_orders = {}

@router.message(F.text == "/admin")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", callback_data="admin_menu")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã", callback_data="admin_hours")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@router.callback_query(F.data == "admin_menu")
async def admin_menu(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="admin_add_dish")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ", callback_data="admin_delete_dish")]
    ])
    await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "admin_add_dish")
async def start_add_dish(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddDishFSM.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")
    await callback.answer()

@router.message(AddDishFSM.name)
async def set_dish_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddDishFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞:")

@router.message(AddDishFSM.description)
async def set_dish_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddDishFSM.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞ (—á–∏—Å–ª–æ):")

@router.message(AddDishFSM.price)
async def set_dish_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        await state.set_state(AddDishFSM.image)
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ (–∏–∑ –≥–∞–ª–µ—Ä–µ–∏, –Ω–µ —Å—Å—ã–ª–∫–æ–π):")
    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.message(AddDishFSM.image, F.photo)
async def set_dish_image(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    new_dish = {
        "id": str(datetime.now().timestamp()),
        "name": data['name'],
        "description": data['description'],
        "price": data['price'],
        "image": photo_id
    }
    menu = load_menu()
    menu.append(new_dish)
    save_menu(menu)
    await message.answer(f"‚úÖ –ë–ª—é–¥–æ \"{data['name']}\" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–µ–Ω—é.")
    await state.clear()

@router.callback_query(F.data == "admin_delete_dish")
async def delete_dish_menu(callback: CallbackQuery):
    menu = load_menu()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=dish['name'], callback_data=f"del_{dish['id']}")]
            for dish in menu
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("del_"))
async def delete_dish(callback: CallbackQuery):
    dish_id = callback.data.split("_")[1]
    menu = load_menu()
    menu = [dish for dish in menu if dish['id'] != dish_id]
    save_menu(menu)
    await callback.message.answer("–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –º–µ–Ω—é.")
    await callback.answer()

@router.callback_query(F.data == "admin_hours")
async def edit_hours(callback: CallbackQuery, state: FSMContext):
    await state.set_state(WorkHoursFSM.waiting_for_open)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
    await callback.answer()

@router.message(WorkHoursFSM.waiting_for_open)
async def set_open_time(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
        WORK_HOURS["open"] = message.text
        await state.set_state(WorkHoursFSM.waiting_for_close)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00).")

@router.message(WorkHoursFSM.waiting_for_close)
async def set_close_time(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
        WORK_HOURS["close"] = message.text
        await state.set_state(WorkHoursFSM.waiting_for_days)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–Ω, –í—Ç, –°—Ä):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00).")

@router.message(WorkHoursFSM.waiting_for_days)
async def set_work_days(message: Message, state: FSMContext):
    valid_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    days = [d.strip().capitalize() for d in message.text.split(",") if d.strip() in valid_days]
    if not days:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–Ω, –í—Ç, –°—Ä). –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –ü–Ω, –í—Ç, –°—Ä, –ß—Ç, –ü—Ç, –°–±, –í—Å")
        return
    WORK_HOURS["days"] = days
    save_work_hours()
    await message.answer(f"‚úÖ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {WORK_HOURS['open']} - {WORK_HOURS['close']}\n–î–Ω–∏: {', '.join(WORK_HOURS['days'])}")
    await state.clear()

@router.callback_query()
async def handle_admin_callback(callback: CallbackQuery, state: FSMContext):
    data = callback.data

    if data == "confirm_order":
        user_id = admin_user_orders.pop(callback.message.message_id, None)
        if user_id:
            await callback.bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
        await callback.message.edit_reply_markup()
        await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")

    elif data == "cancel_order":
        user_id = admin_user_orders.get(callback.message.message_id)
        if user_id:
            await state.set_state(CancelOrderFSM.waiting_for_reason)
            await state.update_data(client_id=user_id, msg_id=callback.message.message_id)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:")
        await callback.message.edit_reply_markup()
        await callback.answer()

@router.message(CancelOrderFSM.waiting_for_reason)
async def process_cancel_reason(message: Message, state: FSMContext):
    data = await state.get_data()
    reason = message.text
    client_id = data.get("client_id")
    if client_id:
        await message.bot.send_message(client_id, f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    admin_user_orders.pop(data.get("msg_id"), None)
    await state.clear()